#include "esp_camera.h"
#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "ESP32_CAM_AP";
const char* password = "12345678";

// Camera pins (OV2640 S3)
#define PWDN_GPIO_NUM    -1
#define RESET_GPIO_NUM   -1
#define XCLK_GPIO_NUM    15
#define SIOD_GPIO_NUM    4
#define SIOC_GPIO_NUM    5
#define Y2_GPIO_NUM      11
#define Y3_GPIO_NUM      9
#define Y4_GPIO_NUM      8
#define Y5_GPIO_NUM      10
#define Y6_GPIO_NUM      12
#define Y7_GPIO_NUM      18
#define Y8_GPIO_NUM      17
#define Y9_GPIO_NUM      16
#define VSYNC_GPIO_NUM   6
#define HREF_GPIO_NUM    7
#define PCLK_GPIO_NUM    13

#define LED_PIN 2   // LED ανάβει σε ανίχνευση κίνησης

WebServer server(80);
camera_fb_t *prev_frame = NULL;

void handle_jpg_stream() {
  WiFiClient client = server.client();
  String response = "HTTP/1.1 200 OK\r\n";
  response += "Content-Type: multipart/x-mixed-replace; boundary=frame\r\n\r\n";
  server.sendContent(response);

  while(client.connected()) {
    camera_fb_t *fb = esp_camera_fb_get();
    if(!fb) break;

    bool motionDetected = false;
    if(prev_frame != NULL && fb->len == prev_frame->len) {
      for(size_t i=0; i<fb->len; i+=1000) {
        if(fb->buf[i] != prev_frame->buf[i]) {
          motionDetected = true;
          break;
        }
      }
    }

    digitalWrite(LED_PIN, motionDetected ? HIGH : LOW);

    response = "--frame\r\n";
    response += "Content-Type: image/jpeg\r\n\r\n";
    server.sendContent(response);
    client.write(fb->buf, fb->len);
    server.sendContent("\r\n");

    if(prev_frame != NULL) esp_camera_fb_return(prev_frame);
    prev_frame = fb;

    if(!client.connected()) break;
  }
}

void handle_root() {
  String html = "<html><body><h1>ESP32-CAM Stream</h1>";
  html += "<p>LED ανάβει όταν ανιχνεύεται κίνηση</p>";
  html += "<img src=\"/stream\" style=\"width:100%;\"/>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA;
  config.jpeg_quality = 10;
  config.fb_count = 2;

  if(esp_camera_init(&config) != ESP_OK){
    Serial.println("Camera init failed");
    return;
  }

  WiFi.softAP(ssid, password);
  Serial.print("Hotspot started! Connect to: ");
  Serial.println(ssid);

  server.on("/", handle_root);
  server.on("/stream", HTTP_GET, handle_jpg_stream);
  server.begin();
}

void loop() {
  server.handleClient();
}
